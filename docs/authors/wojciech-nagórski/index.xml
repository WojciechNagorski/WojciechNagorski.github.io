<?xml version="1.0" encoding="utf-8" standalone="yes" ?>

   <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
     <channel>
       <title>Wojciech Nagórski</title>
       <link>/authors/wojciech-nag%C3%B3rski/</link>
       <description>Recent content on Wojciech Nagórski</description>
       <generator>Hugo -- gohugo.io</generator>
       <language>en-us</language>
       <managingEditor>wojtpl2@gmail.com (Wojciech Nagórski)</managingEditor>
       <webMaster>wojtpl2@gmail.com (Wojciech Nagórski)</webMaster>
       <copyright>&amp;copy; 2018 Wojciech Nagórski</copyright>
       <lastBuildDate>Tue, 18 Dec 2018 02:11:01 -0100</lastBuildDate>
       
           <atom:link href="/authors/wojciech-nag%C3%B3rski/index.xml" rel="self" type="application/rss+xml" />
       
       
       <item>
         <title>How I improved the YamlDotNet performance by 370%</title>
         <link>/2018/12/how-i-improved-the-yamldotnet-performance-by-370/</link>
         <pubDate>Tue, 18 Dec 2018 02:11:01 -0100</pubDate>
         <author>wojtpl2@gmail.com (Wojciech Nagórski)</author>
         <guid>/2018/12/how-i-improved-the-yamldotnet-performance-by-370/</guid>
         <description>

&lt;p&gt;The &lt;a href=&#34;https://github.com/aaubry/YamlDotNet&#34;&gt;YamlDotNet&lt;/a&gt; is the most famous library to manage YAML format on .Net platform. This library is really stable and good solution. Many of my programs use this library, so I thought that this is prefect open source project that I can improve.&lt;/p&gt;

&lt;h4 id=&#34;what-can-i-do&#34;&gt;What can I do?&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;ve opened &lt;a href=&#34;https://github.com/aaubry/YamlDotNet/issues&#34;&gt;issues tab&lt;/a&gt; looking for issues with labels: &amp;ldquo;good first issue&amp;rdquo;, &amp;ldquo;help wanted&amp;rdquo; or &amp;ldquo;up-for-grabs&amp;rdquo;. However I couldn&amp;rsquo;t find them because this specific labels names are not used in this project.&lt;/p&gt;

&lt;p&gt;I thought that I could read the source code and maybe I find something interesting to improve. I have to admit that the source code of the library is really clean. I took a look at the performance tests and immediately realized that I want to improve them.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/aaubry/YamlDotNet&#34;&gt;YamlDotNet&lt;/a&gt; used to use &lt;code&gt;Stopwatch&lt;/code&gt; to measure performance of benchmark tests. The main loop that run the tests looked like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; test &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; tests)
{
    Console.Write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}\t{1}\t&amp;#34;&lt;/span&gt;, adapterName, test.GetType().Name);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; graph = test.Graph;

    &lt;span style=&#34;color:#75715e&#34;&gt;// Warmup
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    RunTest(serializer, graph);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(!Stopwatch.IsHighResolution)
    {
        Console.Error.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Stopwatch is not high resolution!&amp;#34;&lt;/span&gt;);
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; timer = Stopwatch.StartNew();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; iterations; ++i)
    {
        RunTest(serializer, graph);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; duration = timer.Elapsed;
    Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}&amp;#34;&lt;/span&gt;, duration.TotalMilliseconds / iterations);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can find original code &lt;a href=&#34;https://github.com/aaubry/YamlDotNet/blob/v5.2.1/PerformanceTests/YamlDotNet.PerformanceTests.Lib/PerformanceTestRunner.cs#L46-L67&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As you can see tests here are using &lt;code&gt;StopWatch&lt;/code&gt; class to measure code performance. The better way to do it is to use [BenchmarkDotNet which is a powerful .NET library for benchmarking.&lt;/p&gt;

&lt;p&gt;So, let&amp;rsquo;s see how to start.&lt;/p&gt;

&lt;p&gt;At first I wrote code of the test:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[MemoryDiagnoser]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ReceiptTest&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; Receipt _receipt = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Receipt();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; StringWriter _buffer = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringWriter();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; ISerializer _serializer = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SerializerBuilder()
        .WithNamingConvention(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CamelCaseNamingConvention())
        .Build();&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [Benchmark(Description = &amp;#34;Serialize vlatest&amp;#34;)]&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Serialize()
    {
        _serializer.Serialize(_buffer, _receipt.Graph);
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;Serialize()&lt;/code&gt; method marked with &lt;code&gt;[Benchmark]&lt;/code&gt; attribute is my benchmark test. I&amp;rsquo;ve used &lt;code&gt;[MemoryDiagnoser]&lt;/code&gt; because I wanted to know how much memory was used by the &lt;a href=&#34;https://github.com/aaubry/YamlDotNet&#34;&gt;YamlDotNet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then I modified the &lt;code&gt;Program&lt;/code&gt; class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Program&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[]&lt;/span&gt; args)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; summary = BenchmarkRunner.Run&amp;lt;ReceiptTest&amp;gt;();
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I couldn&amp;rsquo;t wait to see my great change in action, so I run the program from console:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dotnet run -c Release&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, I got error message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Validating benchmarks:
Assembly YamlDotNet.PerformanceTests.vlatest which defines benchmarks references non-optimized YamlDotNet
        If you own this dependency, please, build it in RELEASE.
        If you don&#39;t, you can create custom config with DontFailOnError to disable our custom policy and allow this benchmark to run.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a message say &lt;code&gt;If you own this dependency, please, build it in RELEASE&lt;/code&gt; and I went to my Visual Studio and I see:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/YamlDotNetConfigurations.png#normal&#34; alt=&#34;YamlDotNet configurations&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I had chosen &lt;code&gt;Release-PerformanceTests&lt;/code&gt; but BenchmarkDotNet printed me a message that I had to build the library in &lt;code&gt;Release&lt;/code&gt;. Something was wrong.&lt;/p&gt;

&lt;p&gt;For unknown reasons, &lt;code&gt;Release-PerformanceTests&lt;/code&gt; doesn&amp;rsquo;t work in the same way like &lt;code&gt;Release&lt;/code&gt; configuration. After short research I find an &lt;a href=&#34;https://www.pedrolamas.com/2017/04/24/creating-custom-build-configurations-for-the-dotnet-core-project-format/&#34;&gt;article&lt;/a&gt; about this problem.&lt;/p&gt;

&lt;p&gt;In turned out that the new .csproj format for .Net Core doesn&amp;rsquo;t have the same behavior as the old one. The &lt;code&gt;Release-*&lt;/code&gt; configurations doesn&amp;rsquo;t inherit from &lt;code&gt;Release&lt;/code&gt; configuration anymore. All I had to do was set several parameters in the project file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;PropertyGroup&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#39;$(Configuration)&amp;#39; == &amp;#39;Release-Signed&amp;#39; Or &amp;#39;$(Configuration)&amp;#39; == &amp;#39;Release-Unsigned&amp;#39; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;DefineConstants&amp;gt;&lt;/span&gt;$(DefineConstants);RELEASE;TRACE&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/DefineConstants&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;DebugSymbols&amp;gt;&lt;/span&gt;false&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/DebugSymbols&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;DebugType&amp;gt;&lt;/span&gt;portable&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/DebugType&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Optimize&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Optimize&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that changes, &lt;a href=&#34;https://benchmarkdotnet.org/&#34;&gt;BenchmarkDotNet&lt;/a&gt; was working. Out of curiosity, I compared the results before and after my changes and I was shocked.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;-----------------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;| Serialize                                                                       |&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;-----------------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;|         |      Mean |     Error |    StdDev |      Gen0 |      Gen1 | Allocated |&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;-----------------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;| v5.2.1  |  539.5 us |  5.710 us |  5.062 us |    8.7891 |    0.9766 |  30.82 KB |&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;| vlatest |  145.8 us |  1.671 us |  1.563 us |    8.3008 |    0.4883 |   30.7 KB |&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;-----------------------------------------------------------------------------------&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Performance increased about 370% !&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That was great news! I&amp;rsquo;ve made pull request which you can see &lt;a href=&#34;https://github.com/aaubry/YamlDotNet/pull/356&#34;&gt;here&lt;/a&gt; . My changes have been approved to &lt;a href=&#34;https://www.nuget.org/packages/YamlDotNet/5.3.0&#34;&gt;YamlDotNet 5.3.0&lt;/a&gt; version.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;The biggest lesson from this post, is that we always have to measure the performance of our changes, even for small ones. A seemingly insignificant change can spoil our performance.
And last but not least, we should always use existing solutions. Their authors spent a lot of time, so that we could save our time. Instead of creating a new solution, simply use existing one, do not reinvent the wheel.&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>First Pull Request in Open Source</title>
         <link>/2018/12/first-pull-request-in-open-source/</link>
         <pubDate>Tue, 11 Dec 2018 11:16:00 -0400</pubDate>
         <author>wojtpl2@gmail.com (Wojciech Nagórski)</author>
         <guid>/2018/12/first-pull-request-in-open-source/</guid>
         <description>

&lt;p&gt;Not so long ago, I saw a video &lt;a href=&#34;https://www.youtube.com/watch?v=2HSPKyAyuik&#34;&gt;Adam Sitnik - My awesome journey with Open Source&lt;/a&gt; and it opened my eyes.&lt;/p&gt;

&lt;p&gt;I am a senior developer with 11 years of experience in programming. In my career, I did a lot of great things connected to programming, but only my colleagues from work knew about it. If I would like to change my job, I would have to prove my qualifications. Another sad thing about both my personal and business projects is that most of my code is NOT used anymore. It really makes me sad. Than that video came up. Adam showed me that I can create code that will be used all over the world for many, many years. Solution is Open Source.&lt;/p&gt;

&lt;p&gt;But, how to start?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find the repo of project that interests you.&lt;/li&gt;
&lt;li&gt;Go to Issue tab and filter issue by labels: &amp;ldquo;good first issue&amp;rdquo;, &amp;ldquo;help wanted&amp;rdquo; or &amp;ldquo;up-for-grabs&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Optional: Ask if selected issue is up to date and is not blocked.&lt;/li&gt;
&lt;li&gt;Try to implement missing functionality.&lt;/li&gt;
&lt;li&gt;Make a pull request. If you don&amp;rsquo;t know how to do it, please open Google or Youtube and type: &amp;ldquo;how to create pull request on github&amp;rdquo;. It takes only few minutes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, I tried.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I&amp;rsquo;ve chosen &lt;a href=&#34;https://github.com/dotnet/BenchmarkDotNet&#34;&gt;BenchmarkDotNet&lt;/a&gt; repo. Why? I&amp;rsquo;ve used this tool and learned many things when using it.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ve found &lt;a href=&#34;https://github.com/dotnet/BenchmarkDotNet/issues/905&#34;&gt;Implement &lt;code&gt;--list&lt;/code&gt;&lt;/a&gt; issue. The task had all the labels that I mentioned above.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ve reserved task for myself.&lt;/li&gt;
&lt;li&gt;I will describe implementation below.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ve done &lt;a href=&#34;https://github.com/dotnet/BenchmarkDotNet/pull/914&#34;&gt;pull request&lt;/a&gt; with my changes.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;I didn&amp;rsquo;t do anything special in this task. Remember that it was the first pull request to Open Source.&lt;/p&gt;

&lt;p&gt;In this issue I had to implement console line &lt;code&gt;--list&lt;/code&gt; option which will print all of available benchmark names. This option should have two modes:&lt;/p&gt;

&lt;h5 id=&#34;1-flat-list&#34;&gt;1. Flat list&lt;/h5&gt;

&lt;p&gt;This mode is simple list of all benchmark names.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BenchmarkDotNet.Samples.exe --list flat&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;BenchmarkDotNet.Samples.Algo_Md5VsSha256.Md5
BenchmarkDotNet.Samples.Algo_Md5VsSha256.Sha256
BenchmarkDotNet.Samples.IntroArguments.Benchmark
BenchmarkDotNet.Samples.IntroArgumentsSource.SingleArgument
BenchmarkDotNet.Samples.IntroArgumentsSource.ManyArguments
BenchmarkDotNet.Samples.IntroArrayParam.ArrayIndexOf
BenchmarkDotNet.Samples.IntroArrayParam.ManualIndexOf
BenchmarkDotNet.Samples.IntroBasic.Sleep
BenchmarkDotNet.Samples.IntroBasic.Thread.Sleep(10)
[...]
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;2-tree-list&#34;&gt;2. Tree list&lt;/h5&gt;

&lt;p&gt;In this mode BenchmarkDotNet should print all benchmark names as a tree list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BenchmarkDotNet.Samples.exe --list tree&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;BenchmarkDotNet
 └─Samples
    ├─Algo_Md5VsSha256
    │  ├─Md5
    │  └─Sha256
    ├─IntroArguments
    │  └─Benchmark
    ├─IntroArgumentsSource
    │  ├─SingleArgument
    │  └─ManyArguments
    ├─IntroArrayParam
    │  ├─ArrayIndexOf
    │  └─ManualIndexOf
    ├─IntroBasic
    │  ├─Sleep
    │  └─Thread
    │     └─Sleep(10)
[...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At first I added new console parameter. &lt;a href=&#34;https://github.com/dotnet/BenchmarkDotNet&#34;&gt;BenchmarkDotNet&lt;/a&gt; uses &lt;a href=&#34;https://github.com/commandlineparser/commandline&#34;&gt;CommandLineParser&lt;/a&gt; to parse command line attributes. CommandLineParser is useful tool that I implemented in many of projects. If you don&amp;rsquo;t know it, here you can find &lt;a href=&#34;https://github.com/commandlineparser/commandline&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This parameter should have three values: Disable, Flat and Tree. I just added enum:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; ListBenchmarkCaseMode
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/// Do not print any of the available full benchmark names.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        Disable,

        &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/// Prints flat list of the available benchmark names.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        Flat,

        &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/// Prints tree of the available full benchmark names.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        Tree
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I added the appropriate option to the class that is used for parsing command line attributes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[Option(&amp;#34;list&amp;#34;, Required = false, Default = ListBenchmarkCaseMode.Disable, HelpText = &amp;#34;Prints all of the available benchmark names. Flat/Tree&amp;#34;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ListBenchmarkCaseMode ListBenchmarkCaseMode { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Displaying the tree list was the most difficult part. Fortunately, I read &lt;a href=&#34;https://andrewlock.net/about/&#34;&gt;Andrew Lock&lt;/a&gt; blog who wrote post &lt;a href=&#34;https://andrewlock.net/creating-an-ascii-art-tree-in-csharp/&#34;&gt;Creating an ASCII-art tree in C#&lt;/a&gt;. All I had to do was to check the source code license. Luckily for me, it was a &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I created interface:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IBenchmarkCasesPrinter
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Print(IEnumerable&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt; testNames);
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And two implementation of it. One for each mode.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FlatBenchmarkCasesPrinter&lt;/span&gt; : IBenchmarkCasesPrinter
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Print(IEnumerable&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt; testNames)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; test &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; testNames)
            {
                Console.WriteLine(test);
            }
        }
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TreeBenchmarkCasesPrinter&lt;/span&gt; : IBenchmarkCasesPrinter
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Print(IEnumerable&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt; testNames)
        {
            &lt;span style=&#34;color:#75715e&#34;&gt;//Here is the algorithm from the Andrew Lock&amp;#39;s blog
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In next step I used &lt;a href=&#34;https://en.wikipedia.org/wiki/Facade_pattern&#34;&gt;fasade pattern&lt;/a&gt; because I wanted to mask interaction with more complex components behind a single API.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BenchmarkCasesPrinter&lt;/span&gt; : IBenchmarkCasesPrinter
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; IBenchmarkCasesPrinter printer;
        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; BenchmarkCasesPrinter(ListBenchmarkCaseMode listBenchmarkCaseMode)
        {
            printer = listBenchmarkCaseMode == ListBenchmarkCaseMode.Tree
                ? (IBenchmarkCasesPrinter) &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TreeBenchmarkCasesPrinter()
                : &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; FlatBenchmarkCasesPrinter();
        }
         &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Print(IEnumerable&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt; testName) =&amp;gt; printer.Print(testName);
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next I searched for a place where BenchmarkDotNet gets all benchmarks. In the end, I created and run the fasade class, if the value of &lt;code&gt;--list&lt;/code&gt; parameter was set. Bellow you can see how I changed the original code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;- var filteredBenchmarks = typeParser.Filter(effectiveConfig);
&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+ var filteredBenchmarks = typeParser.Filter(effectiveConfig, listBenchmarkCase);
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;
  if (filteredBenchmarks.IsEmpty())
    return Array.Empty&amp;lt;Summary&amp;gt;();
    
&lt;span style=&#34;color:#a6e22e&#34;&gt;+ var listBenchmarkCase = options.ListBenchmarkCaseMode != BistBenchmarkCaseMode.Disable;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+ if (listBenchmarkCase)
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+ {
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+   var testNames = filteredBenchmarks.SelectMany(p =&amp;gt; p.BenchmarksCases)
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+       .Select(p =&amp;gt; p.Descriptor.GetFilterName()).Distinct();
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;+   var printer = new BenchmarkCasesPrinter(options.ListBenchmarkCaseMode);
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+   printer.Print(testNames);
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;+   return Enumerable.Empty&amp;lt;Summary&amp;gt;();
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+ }
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;
  //Old beheviour
  summaries.AddRange(BenchmarkRunner.Run(filteredBenchmarks, effectiveConfig));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see all the details in &lt;a href=&#34;https://github.com/dotnet/BenchmarkDotNet/pull/914&#34;&gt;pull request&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This task did not require knowledge of BenchmarkDotNet internals like running the tests. It was good lesson, you do not need to know the entire source code of the project. You should keep focus on the very specific problem which you want to solve. It saves a lot of time.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;I did this task in no time but doing it made me really happy. The most rewarding thing is that this feature is useful both for me and also for people around the world. The funny thing is that Adam Sitnik showed this feature on Get.Net conference. I was absent but a colleague sent me a photo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/GetNet.jpg#mid&#34; alt=&#34;YamlDotNet configurations&#34; /&gt;&lt;/p&gt;
</description>
       </item>
       
     </channel>
   </rss>
